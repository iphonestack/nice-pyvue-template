# #### OpenResty dynamic upstreams ####
#
# http://hshsh.me/post/2017-10-29-openresty-dynamic-upstreams/
#
# Designed as a flexible developing service, features:
#   - forward port to different upstream according the requested domain name
#   - group ports as project associated with one domain name
#   - route backend requests to different upstream according configured URI mapping
#   - direct forwarding to upstream without backend URI mapping
#   - use static files directory as upstream
#   - online configuration API and usage documentation
#
# NOTE: as saying, this is mainly designed as a developing service,
#       to use in production environment, further testing and optimization
#       are highly recommended.
#

# dyn_registry: key-value configuration cache, where key has three formats
#   1. domain.example.com:port_number, main upstream entries, value has three formats
#      - upstream_ip:upstream_port_number
#      - upstream_ip:upstream_port_number,project
#      - /absolute/path/to/document/root
#   2. domain.example.com:project_name, project URI routes, value is JSON key-value
#      - key: the URI regexp
#      - value: backend upstream_ip:upstream_port_number
#   3. kv:runtime_variable_name, runtime variables shared between Nginx workers
#
lua_shared_dict dyn_registry 2m;

server {
    # list all public available ports here
    listen       8006;
    listen       8007;
    listen       8008;
    listen       8009;

    # and your domain names
    server_name  hello.example.com world.example.com;

    access_log   ./logs/dyn_server_access.log;
    error_log    ./logs/dyn_server_error.log notice;

    default_type  application/json;

    set $dyn_conf_file /path/to/dyn-server.json;
    set $htpasswd_file /path/to/htpasswd_file;

    set $upstream "";
    set_by_lua_block $docroot {
        local cjson = require "cjson"
        local registry = ngx.shared.dyn_registry

        -- load config file on the very first request
        if not registry:get("kv:loaded") then
            local file, err = io.open(ngx.var.dyn_conf_file, "rb")
            if not file then
                ngx.log(ngx.ERR, "error opening config file: ", err)
            else
                local contents = file:read("*all")
                file:close()
                local suc, config = pcall(cjson.decode, contents)
                if not suc then
                    ngx.log(ngx.ERR, "error decoding config file")
                else
                    for k, v in pairs(config) do
                        if k:match(":%d+$") then  -- host:port
                            registry:set(k, v)
                        else
                            registry:set(k, cjson.encode(v))
                        end
                    end
                end
            end
            registry:set("kv:loaded", "true")
        end

        -- don't bother to set anything for configuration endpoints
        if ngx.re.match(ngx.var.uri, [=[^/\.dyn-server/]=]) then
            return ""
        end

        local http_host = ngx.var.http_host
        local upstream = registry:get(http_host)
        if not upstream then
            return ""
        end

        -- direct proxy, no related project
        if upstream:match(":%d+$") then
            ngx.var.upstream = upstream
            return ""
        end

        -- document root directory
        if not upstream:match(",") then
            return upstream
        end

        -- project frontend or backend request
        local proj, routes, uri, dest, m, err
        m, err = ngx.re.match(upstream, [=[([^,]+),([^,]+)]=])
        upstream, proj = m[1], m[2]
        routes = cjson.decode(registry:get(ngx.var.host .. ":" .. proj))
        for uri, dest in pairs(routes) do
            if dest and ngx.re.match(ngx.var.uri, uri) then
                upstream = dest
                break
            end
        end
        ngx.var.upstream = upstream
        return ""
    }

    header_filter_by_lua_block {
        ngx.header["X-Dynamic-Upstream"] = ngx.var.upstream
        ngx.header["X-Dynamic-Docroot"] = ngx.var.docroot
    }

    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_redirect http:// $scheme://;

        # upstream must be checked before docroot
        if ($upstream != "") {
            proxy_pass http://$upstream;
            break;
        }

        if ($docroot = "") {
            return 404;
        }

        root $docroot;
        index index.html index.htm;

        # uncomment the following line to make single page application
        # with history mode router work correctly
        # try_files $uri $uri/ /index.html =404;

        error_page  500 502 503 504  @5xx;
    }

    location @5xx {
        default_type text/plain;
        content_by_lua_block {
            ngx.say("oops: " .. ngx.var.upstream)
        }
    }

    location /.dyn-server/ {

        # WARNING: more strictly authentication or IP address whitelist is highly recommended.
        # use basic auth to protect configuration endpoints
        auth_basic "Dynamic Upstream Authentication";
        auth_basic_user_file $htpasswd_file;

        content_by_lua_block {
            local cjson = require "cjson"
            local registry = ngx.shared.dyn_registry
            local config = {
                help = {
                    [ "parameters" ] = {
                        host = "domain name, eg: example.domain.name",
                        port = "port number, eg: 9001",
                        upstream = "upstream, eg: 127.0.0.1:6666",
                        docroot = "document root, eg: /absolute/path/to/document/root",
                        uri = "backend path with pcre support, be careful with base64 and escape, eg: ^/api/v1/"
                    },
                    [ "direct proxy" ] = {
                        set = "/.dyn-server/set?host=&port=&upstream=",
                        del = "/.dyn-server/del?host=&port="
                    },
                    [ "document root" ] = {
                        set = "/.dyn-server/set?host=&port=&docroot=",
                        del = "/.dyn-server/del?host=&port="
                    },
                    [ "project frontend" ] = {
                        set = "/.dyn-server/set?host=&proj=&port=&upstream=",
                        del = "/.dyn-server/del?host=&port="
                    },
                    [ "project backend" ] = {
                        set = "/.dyn-server/set?host=&proj=&uri=&upstream=",
                        del = "/.dyn-server/del?host=&proj=&uri="
                    }
                }
            }

            -- group config by host and project, or proxy type
            for _, k in ipairs(registry:get_keys()) do
                if not k:match("^kv:") then
                    local v = registry:get(k)
                    local req_type, host, proj, port, upstream, docroot, routes, m, err
                    m, err = ngx.re.match(k, [=[^([^:]+):(\d+)$]=])
                    if m then  -- host:port
                        host, port = m[1], m[2]
                        if v:match(":%d+$") then  -- direct proxy
                            req_type = "proxy"
                            upstream = v
                        elseif not v:match(",") then  -- document root
                            req_type = "docroot"
                            docroot = v
                        else  -- project frontend
                            req_type = "frontend"
                            m, err = ngx.re.match(v, [=[^([^,]+),([^,]+)$]=])
                            upstream, proj = m[1], m[2]
                        end
                    else  -- project backend routes
                        req_type = "backend"
                        m, err = ngx.re.match(k, [=[([^:]+):([^:]+)]=])
                        host, proj = m[1], m[2]
                    end

                    if not config[host] then
                        config[host] = {}
                    end
                    if req_type == "docroot" then
                        config[host][port] = docroot
                    elseif req_type == "proxy" then
                        config[host][port] = upstream
                    else  -- project frontend or backend
                        if not config[host][proj] then
                            config[host][proj] = {}
                        end
                        if req_type == "frontend" then
                            config[host][proj][port] = upstream
                        else
                            config[host][proj]["routes"] = cjson.decode(v)
                        end
                    end
                end
            end
            ngx.say(cjson.encode(config))
        }

        location = /.dyn-server/set {
            content_by_lua_block {
                local cjson = require "cjson"
                local registry = ngx.shared.dyn_registry
                local args = ngx.req.get_uri_args()
                local is_valid = true
                local req_type, r_key, r_value, err

                -- host is required for requests of any type
                if not args or not args.host or args.host:len() == 0 then
                    is_valid = false
                    err = "parameter host required"
                end

                -- project frontend: host, proj, port, upstream
                -- project backend: host, proj, uri, upstream
                -- direct proxy: host, port, upstream
                -- document root: host, port, docroot
                if is_valid and (not req_type) and args.port and args.port:len() > 0 then
                    r_key = args.host .. ":" .. args.port
                    if args.upstream and args.upstream:len() > 0 then
                        if args.proj and args.proj:len() > 0 then
                            req_type = "frontend"
                            r_value = args.upstream .. "," .. args.proj
                        else
                            req_type = "proxy"
                            r_value = args.upstream
                        end
                    elseif args.docroot and args.docroot:len() > 0 then
                        req_type = "docroot"
                        r_value = args.docroot
                    end
                end
                if is_valid and (not req_type) and args.uri and args.uri:len() > 0 and
                        args.upstream and args.upstream:len() > 0 and
                        args.proj and args.proj:len() > 0 then
                    req_type = "backend"
                    r_key = args.host .. ":" .. args.proj
                    local routes = cjson.decode(registry:get(routes_key) or "{}")
                    routes[args.uri] = args.upstream
                    r_value = cjson.encode(routes)
                end

                if req_type then
                    registry:set(r_key, r_value)
                    local res = ngx.location.capture("/.dyn-server/_save")
                    if res.status ~= ngx.HTTP_OK then
                        err = "failed writing config file"
                    else
                        ngx.redirect("/.dyn-server/")
                    end
                end
                ngx.say(cjson.encode({error = err or "parameters invalid or missing"}))
            }
        }

        location = /.dyn-server/del {
            content_by_lua_block {
                local cjson = require "cjson"
                local args = ngx.req.get_uri_args()
                if (not args or not args.host or args.host:len() == 0 or
                        ((not args.port or args.port:len() == 0) and
                         (not args.proj or args.proj:len() == 0 or
                          not args.uri or args.uri:len() == 0))
                    ) then
                    ngx.say(cjson.encode({error = "parameters missing"}))
                    return
                end

                local registry = ngx.shared.dyn_registry
                if args.port and args.port:len() > 0 then
                    registry:delete(args.host .. ":" .. args.port)
                else
                    local routes_key = args.host .. ":" .. args.proj
                    local routes = cjson.decode(registry:get(routes_key) or "{}")
                    local new = {}
                    for uri, dest in pairs(routes) do
                        if dest and uri ~= args.uri then
                            new[uri] = dest
                        end
                    end
                    registry:set(routes_key, cjson.encode(new))
                end

                local res = ngx.location.capture("/.dyn-server/_save")
                if res.status ~= ngx.HTTP_OK then
                    ngx.say(cjson.encode({error = "failed writing config file"}))
                else
                    ngx.redirect("/.dyn-server/")
                end
            }
        }

        location = /.dyn-server/_save {
            internal;
            content_by_lua_block {
                local cjson = require "cjson"
                local registry = ngx.shared.dyn_registry
                local config = {}

                for _, k in ipairs(registry:get_keys()) do
                    if not k:match("^kv:") then
                        local v = registry:get(k)
                        -- host:port
                        if ngx.re.match(k, [=[\:\d+$]=]) then
                            config[k] = v
                        else
                            config[k] = cjson.decode(v)
                        end
                    end
                end

                -- assume we don't need lock to access config file
                local file, err = io.open(ngx.var.dyn_conf_file, "w")
                if file then
                    file:write(cjson.encode(config))
                    file:close()
                    ngx.print("ok")
                else
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.log(ngx.ERR, "failed to save config: ", err)
                    ngx.say(err)
                end
            }
        }

        location ~ /\.dyn-server/.+$ {
            return 301 $scheme://$http_host/.dyn-server/;
        }

    }

}
