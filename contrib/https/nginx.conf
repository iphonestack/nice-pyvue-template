# OpenResty nginx main configuration
#
# Installing OpenResty:
#   https://openresty.org/en/linux-packages.html
#
# Installing ssl-cert-server package for OpenResty:
#   # https://github.com/jxskiss/ssl-cert-server
#   sudo opm get jxskiss/ssl-cert-server
#
# After change configuration, reload or restart openresty with command:
#   sudo service openresty reload
#   sudo service openresty restart
#

#user  nobody;
worker_processes 2;
events {
    worker_connections 1024;
}

#error_log  logs/error.log;
error_log  logs/error.log  notice;

#pid        logs/nginx.pid;

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    access_log  logs/access.log;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_shared_dict ssl_certs_cache 1m;

    init_by_lua_block {
        -- Define a function to determine which SNI domains to automatically
        -- handle and register new certificates for.
        -- Defaults to not allowing any domain, so this must be configured.
        function allow_domain(domain)
            local match = domain:match('.example.com$')
            if match then
                return true
            end
            return false
        end

        -- Initialize backend certificate server instance.
        cert_server = (require "resty.ssl-cert-server").new({
            backend = '127.0.0.1:8999',
            allow_domain = allow_domain
        })
    }

    # HTTPS Server
    server {
        listen 443 ssl;
        server_name hello.example.com;

        # Dynamic handler for issuing or returning certs for SNI domains.
        ssl_certificate_by_lua_block {
            cert_server:ssl_certificate()
        }

        # Fallback certificate required by nginx, self-signed is ok.
        # openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 \
        #   -subj '/CN=sni-support-required-for-valid-ssl' \
        #   -keyout /etc/nginx/certs/fallback-self-signed.key \
        #   -out /etc/nginx/certs/fallback-self-signed.crt
        ssl_certificate /etc/nginx/certs/fallback-self-signed.crt;
        ssl_certificate_key /etc/nginx/certs/fallback-self-signed.key;

        location / {
            content_by_lua_block {
                ngx.say("It works!")
            }
        }
    }

    # HTTP Server
    server {
        listen 80 default_server;
        server_name hello.example.com;

        # Redirect requests to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }

        # Endpoint used for performing domain verification with Let's Encrypt.
        location /.well-known/acme-challenge/ {
            content_by_lua_block {
                cert_server:challenge_server()
            }
        }
    }

}
